// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: course.sql

package db

import (
	"context"
)

const createCourse = `-- name: CreateCourse :exec
INSERT INTO courses (id, name, description, price, category_id)
VALUES (?, ?, ?, ?, ?)
`

type CreateCourseParams struct {
	ID          string
	Name        string
	Description string
	Price       float64
	CategoryID  string
}

func (q *Queries) CreateCourse(ctx context.Context, arg CreateCourseParams) error {
	_, err := q.db.ExecContext(ctx, createCourse,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.CategoryID,
	)
	return err
}

const listCourses = `-- name: ListCourses :many
SELECT c.id, c.category_id, c.name, c.description, c.price,
       ca.name AS category_name
FROM courses c
    JOIN categories ca ON c.category_id = ca.id
`

type ListCoursesRow struct {
	ID           string
	CategoryID   string
	Name         string
	Description  string
	Price        float64
	CategoryName string
}

func (q *Queries) ListCourses(ctx context.Context) ([]ListCoursesRow, error) {
	rows, err := q.db.QueryContext(ctx, listCourses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCoursesRow
	for rows.Next() {
		var i ListCoursesRow
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.CategoryName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
