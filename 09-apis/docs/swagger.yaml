basePath: /
definitions:
  dto.AuthOutput:
    properties:
      access_token:
        type: string
    type: object
  dto.CreateProductInput:
    properties:
      name:
        type: string
      price:
        type: number
    type: object
  dto.CreateUserInput:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  dto.ErrorOutput:
    properties:
      message:
        type: string
    type: object
  dto.LoginInput:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  dto.ProductOutput:
    properties:
      id:
        type: string
      name:
        type: string
      price:
        type: number
    type: object
  dto.UpdateProductInput:
    properties:
      name:
        type: string
      price:
        type: number
    type: object
host: localhost:8000
info:
  contact:
    email: allanmaralr@gmail.com
    name: Allan Ribeiro
    url: https://github.com/allanmaral
  description: Product API with authentication
  license:
    name: MIT
    url: https://github.com/allanmaral/go-expert/LICENCE.txt
  termsOfService: http://swagger.io/terms/
  title: Go Expert API Example
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login and generate a JWT
      parameters:
      - description: user credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorOutput'
      summary: Login and generate a JWT
      tags:
      - users
  /products:
    get:
      consumes:
      - application/json
      description: List all products
      parameters:
      - description: Page number
        in: query
        name: page
        type: string
      - description: Page page size limit
        in: query
        name: limit
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.ProductOutput'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorOutput'
      security:
      - ApiKeyAuth: []
      summary: List products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Create a product
      parameters:
      - description: Product data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateProductInput'
      responses:
        "201":
          description: Created
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorOutput'
      security:
      - ApiKeyAuth: []
      summary: Create product
      tags:
      - products
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific product
      parameters:
      - description: Product Identifier
        format: uuid
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/dto.ProductOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorOutput'
      security:
      - ApiKeyAuth: []
      summary: Delete a product
      tags:
      - products
    get:
      consumes:
      - application/json
      description: Get a specific product
      parameters:
      - description: Product Identifier
        format: uuid
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProductOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorOutput'
      security:
      - ApiKeyAuth: []
      summary: Get a product
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update a specific product
      parameters:
      - description: Product Identifier
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Updated product data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateProductInput'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProductOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorOutput'
      security:
      - ApiKeyAuth: []
      summary: Update a product
      tags:
      - products
  /users:
    post:
      consumes:
      - application/json
      description: Create user
      parameters:
      - description: user request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorOutput'
      summary: Create user
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
